// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 4 == 0
$assert BATCH_TILE >= 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <arm_neon.h>

#include <xnnpack/common.h>
#include <xnnpack/vunary.h>


void xnn_f32_sigmoid_ukernel__neonfma_p5_nr2fma_x${BATCH_TILE}(
    size_t n,
    const float* x,
    float* y,
    const void* params)
{
  assert(n % sizeof(float) == 0);

  const float32x4_t vmagic_bias = vmovq_n_f32(0x1.8000FEp23f);
  // The smallest x for which sigmoidf(x) is normalized.
  // This number is also the smallest x for which expf(x) is normalized.
  const float32x4_t vdenorm_cutoff = vmovq_n_f32(-0x1.5D589Ep+6f);
  // The largest x for which sigmoidf(x) is not equal 1.0.
  const float32x4_t vone_cutoff = vmovq_n_f32(0x1.154244p+4f);
  const float32x4_t vminus_log2e = vmovq_n_f32(-0x1.715476p+0f);
  const float32x4_t vln2_hi = vmovq_n_f32(0x1.62E43p-1f);
  const float32x4_t vln2_lo = vmovq_n_f32(-0x1.05C61p-29f);
  const float32x4_t vone = vmovq_n_f32(1.0f);

  const float32x4_t vc1 = vmovq_n_f32(-0x1.FFFFF6p-1f);
  const float32x4_t vc2 = vmovq_n_f32(0x1.FFFDC6p-2f);
  const float32x4_t vc3 = vmovq_n_f32(-0x1.555A80p-3f);
  const float32x4_t vc4 = vmovq_n_f32(0x1.573A1Ap-5f);
  const float32x4_t vc5 = vmovq_n_f32(-0x1.0F9F9Cp-7f);

  for (; n >= ${BATCH_TILE} * sizeof(float); n -= ${BATCH_TILE} * sizeof(float)) {
    $for N in range(0, BATCH_TILE, 4):
      const float32x4_t vx${ABC[N:N+4]} = vld1q_f32(x); x += 4;

    // General structure of the algorithm:
    //           / exp(x) / (1 + exp(x)) if x <= 0
    //   f[x] := 
    //           \ 1 - f[-x] if x >= 0
    //
    // First we compute f[z] := exp(-z) / (1 + exp(-z)) where z = abs(x),
    // then replace result with 1 - f[z] if x >= 0.
    $for N in range(0, BATCH_TILE, 4):
      const float32x4_t vz${ABC[N:N+4]} = vabsq_f32(vx${ABC[N:N+4]});

    // Compute reduced argument n := round(-z / log(2)).
    // We do it by adding a large number (magic bias), which cause rounding of result to an integer, then subtracing the
    // large number back. The first addition is combined with multiplication by log2e into a single FMA instruction.
    // The trick with adding large number is valid only within certain bounds (|x| <= 2**22), but thats ok, because
    // inputs x outside of [-87.336544, 17.328678] (i.e. z outsize [0, 87.336544]) underflow or saturate sigmoidf(x)
    // anyway. We fixup the result for such inputs at the very end of the algorithm.
    $for N in range(0, BATCH_TILE, 4):
      float32x4_t vn${ABC[N:N+4]} = vfmaq_f32(vmagic_bias, vz${ABC[N:N+4]}, vminus_log2e);

    // Create a floating-point number s (scale) such that s == 2**n for inputs which don't cause underflow, i.e.
    // -87.336544 <= -z <= 0.0, and -126 <= n <= 0 accordingly.
    $for N in range(0, BATCH_TILE, 4):
      const float32x4_t vs${ABC[N:N+4]} = vreinterpretq_f32_s32(vshlq_n_s32(vreinterpretq_s32_f32(vn${ABC[N:N+4]}), 23));

    // Subtract the large number back to get final n := round(-z / log(2)).
    $for N in range(0, BATCH_TILE, 4):
      vn${ABC[N:N+4]} = vsubq_f32(vn${ABC[N:N+4]}, vmagic_bias);

    // Compute reduced argument -t := -z - n * log(2) = -(z + n * log(2)).
    // Use Cody-Waite range reduction method (note two constants to represent log(2)) to improve accuracy.
    $for N in range(0, BATCH_TILE, 4):
      float32x4_t vt${ABC[N:N+4]} = vfmaq_f32(vz${ABC[N:N+4]}, vn${ABC[N:N+4]}, vln2_hi);

    $for N in range(0, BATCH_TILE, 4):
      vt${ABC[N:N+4]} = vfmaq_f32(vt${ABC[N:N+4]}, vn${ABC[N:N+4]}, vln2_lo);

    // Compute degree-5 polynomial approxiatmion for exp(-t) on [-log(2)/2, log(2)/2].
    $for N in range(0, BATCH_TILE, 4):
      float32x4_t vp${ABC[N:N+4]} = vfmaq_f32(vc4, vc5, vt${ABC[N:N+4]});

    $for N in range(0, BATCH_TILE, 4):
      vp${ABC[N:N+4]} = vfmaq_f32(vc3, vp${ABC[N:N+4]}, vt${ABC[N:N+4]});

    $for N in range(0, BATCH_TILE, 4):
      vp${ABC[N:N+4]} = vfmaq_f32(vc2, vp${ABC[N:N+4]}, vt${ABC[N:N+4]});

    $for N in range(0, BATCH_TILE, 4):
      vp${ABC[N:N+4]} = vfmaq_f32(vc1, vp${ABC[N:N+4]}, vt${ABC[N:N+4]});

    // Reconstruct the exp(z) value:
    //   e = s * (1 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * c5)))))
    //     = s + (t * s) * (c1 + t * (c2 + t * (c3 + t * (c4 + t * c5))))
    //     = s + (t * s) * p
    $for N in range(0, BATCH_TILE, 4):
      vt${ABC[N:N+4]} = vmulq_f32(vt${ABC[N:N+4]}, vs${ABC[N:N+4]});

    $for N in range(0, BATCH_TILE, 4):
      float32x4_t ve${ABC[N:N+4]} = vfmaq_f32(vs${ABC[N:N+4]}, vp${ABC[N:N+4]}, vt${ABC[N:N+4]});

    // Denominator of the sigmoid fraction: 1.0 + exp(z)
    $for N in range(0, BATCH_TILE, 4):
      float32x4_t vd${ABC[N:N+4]} = vaddq_f32(ve${ABC[N:N+4]}, vone);

    // Use Newton-Raphson method (2 iterations) to compute reciprocal of denominator.
    // Note: 1 < d <= 2, because z <= 0.0 and 0 < exp(z) <= 1.0.
    // Thus the reciprocal of the denominator never overflows.
    $for N in range(0, BATCH_TILE, 4):
      float32x4_t vr${ABC[N:N+4]} = vrecpeq_f32(vd${ABC[N:N+4]});

    $for N in range(0, BATCH_TILE, 4):
      vr${ABC[N:N+4]} = vfmaq_f32(vr${ABC[N:N+4]}, vr${ABC[N:N+4]}, vfmsq_f32(vone, vr${ABC[N:N+4]}, vd${ABC[N:N+4]}));

    $for N in range(0, BATCH_TILE, 4):
      vr${ABC[N:N+4]} = vfmaq_f32(vr${ABC[N:N+4]}, vr${ABC[N:N+4]}, vfmsq_f32(vone, vr${ABC[N:N+4]}, vd${ABC[N:N+4]}));

    // Reconstruct sigmoid(-z) = exp(z) / (1.0 + exp(z))
    $for N in range(0, BATCH_TILE, 4):
      float32x4_t vf${ABC[N:N+4]} = vmulq_f32(ve${ABC[N:N+4]}, vr${ABC[N:N+4]});

    // Reconstruct sigmoid(x) = x < 0 ? sigmoid(z) : 1.0 - sigmoid(z)
    $for N in range(0, BATCH_TILE, 4):
      const uint32x4_t vm${ABC[N:N+4]} = vcltq_s32(vreinterpretq_s32_f32(vx${ABC[N:N+4]}), vmovq_n_s32(0));

    $for N in range(0, BATCH_TILE, 4):
      vf${ABC[N:N+4]} = vbslq_f32(vm${ABC[N:N+4]}, vf${ABC[N:N+4]}, vsubq_f32(vone, vf${ABC[N:N+4]}));

    // For inputs above 1.0 cutoff, replace output with 1.0.
    // Note that for NaN inputs, comparison result is false, and outputs are left unchanged.
    $for N in range(0, BATCH_TILE, 4):
      vf${ABC[N:N+4]} = vbslq_f32(vcgtq_f32(vx${ABC[N:N+4]}, vone_cutoff), vone, vf${ABC[N:N+4]});

    // For inputs below denormal cutoff, replace output with +0.0f.
    // Note that for NaN inputs, comparison result is false, and outputs are left unchanged.
    $for N in range(0, BATCH_TILE, 4):
      vf${ABC[N:N+4]} = vreinterpretq_f32_u32(vbicq_u32(vreinterpretq_u32_f32(vf${ABC[N:N+4]}), vcltq_f32(vx${ABC[N:N+4]}, vdenorm_cutoff)));

    $for N in range(0, BATCH_TILE, 4):
      vst1q_f32(y, vf${ABC[N:N+4]}); y += 4;
  }
  for (; n >= 4 * sizeof(float); n -= 4 * sizeof(float)) {
    const float32x4_t vx0123 = vld1q_f32(x); x += 4;

    // General structure of the algorithm:
    //           / exp(x) / (1 + exp(x)) if x <= 0
    //   f[x] := 
    //           \ 1 - f[-x] if x >= 0
    //
    // First we compute f[z] := exp(-z) / (1 + exp(-z)) where z = abs(x),
    // then replace result with 1 - f[z] if x <= 0.
    const float32x4_t vz0123 = vabsq_f32(vx0123);

    // Compute reduced argument n := round(-z / log(2)).
    // We do it by adding a large number (magic bias), which cause rounding of result to an integer, then subtracing the
    // large number back. The first addition is combined with multiplication by log2e into a single FMA instruction.
    // The trick with adding large number is valid only within certain bounds (|x| <= 2**22), but thats ok, because
    // inputs x outside of [-87.336544, 17.328678] (i.e. z outsize [0, 87.336544]) underflow or saturate sigmoidf(x)
    // anyway. We fixup the result for such inputs at the very end of the algorithm.
    float32x4_t vn0123 = vfmaq_f32(vmagic_bias, vz0123, vminus_log2e);

    // Create a floating-point number s (scale) such that s == 2**n for inputs which don't cause underflow, i.e.
    // -87.336544 <= -z <= 0.0, and -126 <= n <= 0 accordingly.
    const float32x4_t vs0123 = vreinterpretq_f32_s32(vshlq_n_s32(vreinterpretq_s32_f32(vn0123), 23));

    // Subtract the large number back to get final n := round(-z / log(2)).
    vn0123 = vsubq_f32(vn0123, vmagic_bias);

    // Compute reduced argument -t := -z - n * log(2) = -(z + n * log(2)).
    // Use Cody-Waite range reduction method (note two constants to represent log(2)) to improve accuracy.
    float32x4_t vt0123 = vfmaq_f32(vz0123, vn0123, vln2_hi);
    vt0123 = vfmaq_f32(vt0123, vn0123, vln2_lo);

    // Compute degree-5 polynomial approxiatmion for exp(-t) on [-log(2)/2, log(2)/2].
    float32x4_t vp0123 = vfmaq_f32(vc4, vc5, vt0123);
    vp0123 = vfmaq_f32(vc3, vp0123, vt0123);
    vp0123 = vfmaq_f32(vc2, vp0123, vt0123);
    vp0123 = vfmaq_f32(vc1, vp0123, vt0123);

    // Reconstruct the exp(z) value:
    //   e = s * (1 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * c5)))))
    //     = s + (t * s) * (c1 + t * (c2 + t * (c3 + t * (c4 + t * c5))))
    //     = s + (t * s) * p
    vt0123 = vmulq_f32(vt0123, vs0123);
    float32x4_t ve0123 = vfmaq_f32(vs0123, vp0123, vt0123);

    // Denominator of the sigmoid fraction: 1.0 + exp(z)
    float32x4_t vd0123 = vaddq_f32(ve0123, vone);

    // Use Newton-Raphson method (2 iterations) to compute reciprocal of denominator.
    // Note: 1 < d <= 2, because z <= 0.0 and 0 < exp(z) <= 1.0.
    // Thus the reciprocal of the denominator never overflows.
    float32x4_t vr0123 = vrecpeq_f32(vd0123);
    vr0123 = vfmaq_f32(vr0123, vr0123, vfmsq_f32(vone, vr0123, vd0123));
    vr0123 = vfmaq_f32(vr0123, vr0123, vfmsq_f32(vone, vr0123, vd0123));

    // Reconstruct sigmoid(-z) = exp(z) / (1.0 + exp(z))
    float32x4_t vf0123 = vmulq_f32(ve0123, vr0123);

    // Reconstruct sigmoid(x) = x < 0 ? sigmoid(z) : 1.0 - sigmoid(z)
    const uint32x4_t vm0123 = vcltq_s32(vreinterpretq_s32_f32(vx0123), vmovq_n_s32(0));
    vf0123 = vbslq_f32(vm0123, vf0123, vsubq_f32(vone, vf0123));

    // For inputs above 1.0 cutoff, replace output with 1.0.
    // Note that for NaN inputs, comparison result is false, and outputs are left unchanged.
    vf0123 = vbslq_f32(vcgtq_f32(vx0123, vone_cutoff), vone, vf0123);

    // For inputs below denormal cutoff, replace output with +0.0f.
    // Note that for NaN inputs, comparison result is false, and outputs are left unchanged.
    vf0123 = vreinterpretq_f32_u32(vbicq_u32(vreinterpretq_u32_f32(vf0123), vcltq_f32(vx0123, vdenorm_cutoff)));

    vst1q_f32(y, vf0123); y += 4;
  }
  if XNN_UNLIKELY(n != 0) {
    const float32x4_t vx0123 = vld1q_f32(x);

    // General structure of the algorithm:
    //           / exp(x) / (1 + exp(x)) if x <= 0
    //   f[x] := 
    //           \ 1 - f[-x] if x >= 0
    //
    // First we compute f[z] := exp(-z) / (1 + exp(-z)) where z = abs(x),
    // then replace result with 1 - f[z] if x <= 0.
    const float32x4_t vz0123 = vabsq_f32(vx0123);

    // Compute reduced argument n := round(-z / log(2)).
    // We do it by adding a large number (magic bias), which cause rounding of result to an integer, then subtracing the
    // large number back. The first addition is combined with multiplication by log2e into a single FMA instruction.
    // The trick with adding large number is valid only within certain bounds (|x| <= 2**22), but thats ok, because
    // inputs x outside of [-87.336544, 17.328678] (i.e. z outsize [0, 87.336544]) underflow or saturate sigmoidf(x)
    // anyway. We fixup the result for such inputs at the very end of the algorithm.
    float32x4_t vn0123 = vfmaq_f32(vmagic_bias, vz0123, vminus_log2e);

    // Create a floating-point number s (scale) such that s == 2**n for inputs which don't cause underflow, i.e.
    // -87.336544 <= -z <= 0.0, and -126 <= n <= 0 accordingly.
    const float32x4_t vs0123 = vreinterpretq_f32_s32(vshlq_n_s32(vreinterpretq_s32_f32(vn0123), 23));

    // Subtract the large number back to get final n := round(-z / log(2)).
    vn0123 = vsubq_f32(vn0123, vmagic_bias);

    // Compute reduced argument -t := -z - n * log(2) = -(z + n * log(2)).
    // Use Cody-Waite range reduction method (note two constants to represent log(2)) to improve accuracy.
    float32x4_t vt0123 = vfmaq_f32(vz0123, vn0123, vln2_hi);
    vt0123 = vfmaq_f32(vt0123, vn0123, vln2_lo);

    // Compute degree-5 polynomial approxiatmion for exp(-t) on [-log(2)/2, log(2)/2].
    float32x4_t vp0123 = vfmaq_f32(vc4, vc5, vt0123);
    vp0123 = vfmaq_f32(vc3, vp0123, vt0123);
    vp0123 = vfmaq_f32(vc2, vp0123, vt0123);
    vp0123 = vfmaq_f32(vc1, vp0123, vt0123);

    // Reconstruct the exp(z) value:
    //   e = s * (1 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * c5)))))
    //     = s + (t * s) * (c1 + t * (c2 + t * (c3 + t * (c4 + t * c5))))
    //     = s + (t * s) * p
    vt0123 = vmulq_f32(vt0123, vs0123);
    float32x4_t ve0123 = vfmaq_f32(vs0123, vp0123, vt0123);

    // Denominator of the sigmoid fraction: 1.0 + exp(z)
    float32x4_t vd0123 = vaddq_f32(ve0123, vone);

    // Use Newton-Raphson method (2 iterations) to compute reciprocal of denominator.
    // Note: 1 < d <= 2, because z <= 0.0 and 0 < exp(z) <= 1.0.
    // Thus the reciprocal of the denominator never overflows.
    float32x4_t vr0123 = vrecpeq_f32(vd0123);
    vr0123 = vfmaq_f32(vr0123, vr0123, vfmsq_f32(vone, vr0123, vd0123));
    vr0123 = vfmaq_f32(vr0123, vr0123, vfmsq_f32(vone, vr0123, vd0123));

    // Reconstruct sigmoid(-z) = exp(z) / (1.0 + exp(z))
    float32x4_t vf0123 = vmulq_f32(ve0123, vr0123);

    // Reconstruct sigmoid(x) = x < 0 ? sigmoid(z) : 1.0 - sigmoid(z)
    const uint32x4_t vm0123 = vcltq_s32(vreinterpretq_s32_f32(vx0123), vmovq_n_s32(0));
    vf0123 = vbslq_f32(vm0123, vf0123, vsubq_f32(vone, vf0123));

    // For inputs above 1.0 cutoff, replace output with 1.0.
    // Note that for NaN inputs, comparison result is false, and outputs are left unchanged.
    vf0123 = vbslq_f32(vcgtq_f32(vx0123, vone_cutoff), vone, vf0123);

    // For inputs below denormal cutoff, replace output with +0.0f.
    // Note that for NaN inputs, comparison result is false, and outputs are left unchanged.
    vf0123 = vreinterpretq_f32_u32(vbicq_u32(vreinterpretq_u32_f32(vf0123), vcltq_f32(vx0123, vdenorm_cutoff)));

    float32x2_t vf01 = vget_low_f32(vf0123);
    if (n & (2 * sizeof(float))) {
      vst1_f32(y, vf01); y += 2;
      vf01 = vget_high_f32(vf0123);
    }
    if (n & (1 * sizeof(float))) {
      vst1_lane_f32(y, vf01, 0);
    }
  }
}
